 <chapter id="using">
  <title>Using YAZ proxy</title>
  <para>
   As mentioned in the introduction the YAZ proxy has many uses.
   This chapter includes a few examples.
  </para>
  <para>
   The YAZ Proxy is useful for debugging SRU/Z39.50 software, logging
   APDUs, redirecting Z39.50 packages through firewalls, etc.
   Furthermore, it offers facilities that often
   boost performance for connection-less Z39.50 clients such
   as web gateways.
  </para>
  <para>
   Unlike most other server software, the proxy runs single-threaded,
   single-process. Every I/O operation
   is non-blocking so it is very lightweight and extremely fast.
   It does not store any state information on the hard drive,
   except any log files you ask for.
  </para>

  <example id="example-apdu-logging">
   <title>Using the Proxy to Log APDUs</title>
   <para>
    Suppose you use a commercial Z39.50 client for which you do not
    have source code, and it's not behaving how you think it should
    when running against some specific server that you have no control
    over.  One way to diagnose the problem is to find out what packets
    (APDUs) are being sent and received, but not all client
    applications have facilities to do APDU logging.
   </para>
   <para>
    No problem.  Run the proxy on a friendly machine, get it to log
    APDUs, and point the errant client at the proxy instead of
    directly at the server that's causing it problems.
   </para>
   <para>
    Suppose the server is running on <literal>foo.bar.com</literal>,
    port 18398.  Run the proxy on the machine of your choice, say
    <literal>your.company.com</literal> like this:
   </para>
   <screen>
    yazproxy -a - -t tcp:foo.bar.com:18398 tcp:@:9000
   </screen>
   <para>
    (The <literal>-a -</literal> option requests APDU logging on
    standard output, <literal>-t tcp:foo.bar.com:18398</literal>
    specifies where the backend target is, and
    <literal>tcp:@:9000</literal> tells the proxy to listen on port
    9000 and accept connections from any machine.)
   </para>
   <para>
    Now change your client application's configuration so that instead
    of connecting to <literal>foo.bar.com</literal> port 18398, it
    connects to <literal>your.company.com</literal> port 9000, and
    start it up.  It will work exactly as usual, but all the packets
    will be sent via the proxy, which will generate a log like this:
   </para>
   <screen><![CDATA[
    decode choice
    initRequest {
        referenceId OCTETSTRING(len=4) 69 6E 69 74
        protocolVersion BITSTRING(len=1)
        options BITSTRING(len=2)
        preferredMessageSize 1048576
        maximumRecordSize 1048576
        implementationId 'Mike Taylor (id=169)'
        implementationName 'Net::Z3950.pm (Perl)'
        implementationVersion '0.31'
    }
    encode choice
    initResponse {
        referenceId OCTETSTRING(len=4) 69 6E 69 74
        protocolVersion BITSTRING(len=1)
        options BITSTRING(len=2)
        preferredMessageSize 1048576
        maximumRecordSize 1048576
        result TRUE
        implementationId '81'
        implementationName 'GFS/YAZ / Zebra Information Server'
        implementationVersion 'YAZ 1.9.1 / Zebra 1.3.3'
    }
    decode choice
    searchRequest {
        referenceId OCTETSTRING(len=1) 30
        smallSetUpperBound 0
        largeSetLowerBound 1
        mediumSetPresentNumber 0
        replaceIndicator TRUE
        resultSetName 'default'
        databaseNames {
            'gils'
        }
        {
            smallSetElementSetNames choice
            generic 'F'
        }
        {
            mediumSetElementSetNames choice
            generic 'B'
        }
        preferredRecordSyntax OID: 1 2 840 10003 5 10
        {
            query choice
            type_1 {
                attributeSetId OID: 1 2 840 10003 3 1
                RPNStructure choice
                {
                    simple choice
                    attributesPlusTerm {
                        attributes {
                        }
                        term choice
                        general OCTETSTRING(len=7) 6D 69 6E 65 72 61 6C
                    }
                }
            }
        }
    }
]]>
   </screen>
  </example>

  <example id="first-config">
   <title>Using a configuration file</title>
   <para>
    In <xref linkend="example-apdu-logging"/> the default backend server
    was specified by a command line option. The same proxy behavior can
    be achieved by creating a configuration with the following contents:
    <screen><![CDATA[
     <?xml version="1.0"?>
     <proxy xmlns="http://indexdata.dk/yazproxy/schema/0.9/">
       <target name="foo" default="1">
         <url>foo.bar.com:18398</url>
         <log>client-apdu</log>
       </target>
       <target name="*">
       </target>
     </proxy>
]]>
    </screen>
   </para>
   <para>
    The proxy is started with
    <screen><![CDATA[
     yazproxy -c config.xml @:9000
]]>
    </screen>
   </para>
   <para>
    The last target section is used for all servers except foo.
    Had the the last section been omitted, then
    <emphasis>only</emphasis> foo could be reached via the proxy.
   </para>
  </example>
  
  <example id="example-srw-service">
   <title>Offering SRU/Z39.50 service</title>
   <para>
    In order to offer SRU service we must be specify sufficient
    information to allow the proxy to convert from SRU to Z39.50.
    This involves translating CQL queries
    to Type-1 (also called RPN/PQF), since most
    Z39.50 servers do not support CQL. The conversion
    is specified by the <literal>cql2rpn</literal> element.
   </para>
   <para>
    We must also ensure that the
    server can return at least one kind of XML record (Dublin-Core
    recommended). 
   </para>
   <para>
    An explain record for the SRU service must also be created.
   </para>
   <para>
    The following is a relatively simple configuration file for 
    such a service. This service lives on <literal>indexdata.dk</literal>,
    port 9000. The database is <literal>gils</literal>. The
    backend server is also <literal>indexdata.dk</literal> (port 210) as
    given by <literal>url</literal>.
   </para>
   <para>
    The server may return USMARC/MARC21 (Z39.50/SRU) and
    MARCXML (SRU only) as specified by the
    <link linkend="proxy-config-syntax">syntax</link> elements.
   </para>
    <screen><![CDATA[
<?xml version="1.0"?>
<!-- $Id: using.xml,v 1.7 2006-06-14 10:12:26 adam Exp $ -->
<proxy xmlns="http://indexdata.dk/yazproxy/schema/0.9/">
  <target name="bagel">
    <url>indexdata.dk</url>
    <target-timeout>240</target-timeout>
    <client-timeout>180</client-timeout>
    <attribute type="1" value="1-11,13-1016"/>
    <attribute type="1" value="*" error="114"/>
    <syntax type="usmarc"/>
    <syntax type="none"/>
    <syntax type="xml" marcxml="1"
      identifier="info:srw/schema/1/marcxml-v1.1" >
      <name>marcxml</name>
    </syntax>
    <syntax type="*" error="238"/>
    <preinit>0</preinit>
    <explain xmlns="http://explain.z3950.org/dtd/2.0/">
       <serverInfo>
       <host>indexdata.dk</host>
       <port>9000</port>
       <database>gils</database>
       </serverInfo>
    </explain>
    <cql2rpn>pqf.properties</cql2rpn>
  </target>
</proxy>
]]>
    </screen>
   <para>
    The conversion from CQL to RPN is specified by a file whose name,
    relative to the working directory, is given in the
    <link linkend="proxy-config-cql2rpn">cql2rpn</link> element.
    A complete Bath/DC conversion file,
    <filename>pqf.properties</filename> is provided as part of the
    yazproxy distribution in the <filename>etc</filename>
    subdirectory.
   </para>
   <para>
    Explain information is embedded in the configuration file. 
    Note that in this example,only a few mandatory
    explain elements are specified. A well-behaving server should describe
    index sets, indexes, record schemas as well.
   </para>
  </example>
 </chapter>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document: "yazproxy.xml"
 sgml-local-catalogs: nil
 sgml-namecase-general:t
 End:
 -->
 
