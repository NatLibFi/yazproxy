<chapter id="installation">
  <!-- $Id: installation.xml,v 1.11 2006-04-26 12:17:23 adam Exp $ -->
  <title>Installation</title>
  <para>
   You need a C++ compiler to compile and use YAZ proxy.
   The software was implemented using
   <ulink url="&url.gcc;">GCC</ulink> so we know that works
   well with YAZ proxy. From time to time the software has been
   compiled on Windows using Visual C++. Other compilers should
   work too. Let us know of portability problems, etc. with
   your system.
  </para>
  <para>
   YAZ proxy is built on top of the 
   <ulink url="&url.yaz;">YAZ</ulink> and
   <ulink url="&url.yazplusplus;">YAZ++</ulink>
   toolkits.
   You need to install these first.
   For some platforms there are binary packages available for YAZ/YAZ++.
  </para>
  <para>
   We also highly recommend that
   <ulink url="&url.libxml2;">libxml2</ulink> and
   <ulink url="&url.libxslt;">libXSLT</ulink> are installed.
   YAZ must be configured with libxml2 support.
   If not, 
   <ulink url="&url.sru;">SRW/SRU</ulink>
   is not supported.
   The YAZ Proxy uses libXSLT for record conversions via XSLT.
  </para>
  <para>
   YAZ proxy may also use USEMARCON to convert between MARC
   formats. This is useful if you want the proxy to offer more
   MARC record types than the backend target supports. Get USEMARCON
   from:
   <ulink url="&url.usemarcon;">British Library USEMARCON page
   </ulink>.
  </para>
  <section id="unix">
   <title>Building on Unix</title>
   <para>On UNIX, the software is compiled as follows:
    <screen>
     $ ./configure
     $ make
     $ su
     # make install
    </screen>
   </para>
   <para>
    You can supply options for the <literal>configure</literal> script.
    The most useful ones are:
    <variablelist>
     <varlistentry>
      <term><literal>--prefix </literal>directory</term>
      <listitem><para>
        Specifies installation prefix. By default
        <literal>/usr/local</literal> is used.
       </para></listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--with-yazpp </literal>directory</term>
      <listitem><para>
        Specifies the location of <filename>yazpp-config</filename>.
        The <filename>yazpp-config</filename> program is generated in
        the source directory of YAZ++ as well as the binaries
        directory when YAZ++ is installed (via make install).
        </para>
       <para>
        If you don't supply this option, <literal>configure</literal> will
        look for <filename>yazpp-config</filename> in directories of the
        <envar>PATH</envar> environment - which is nearly always
        what you want.
       </para></listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--with-xslt </literal>directory</term>
      <listitem><para>
        Specifies prefix for libXSLT (and libxml2).
	configure must be able to locate <command>xslt-config</command>
	in PREFIX/bin. If this option is omitted, configure looks
	for <command>xslt-config</command> in the current PATH.
       </para></listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--with-usemarcon </literal>directory</term>
      <listitem><para>
        Specifies USEMARCON installation prefix.
	configure must be able to locate <command>usemarcon-config</command>
	in PREFIX/bin. If this option is omitted, configure looks
	for <command>usemarcon-config</command> in the current PATH.
       </para></listitem>
     </varlistentry>
    </variablelist>
    For the whole list of <literal>configure</literal> options, refer
    to the help:
    <literal>./configure --help</literal>.
   </para>
   <para>
    Configure uses GCC's C/C++ compiler if available. To specify another
    compiler, set <literal>CXX</literal>. To use other compiler flags,
    specify <literal>CXXFLAGS</literal>. For example, to use
    <literal>CC</literal> with debugging do:
    <screen>
     CXXFLAGS="-g" CXX=CC ./configure
    </screen>
   </para>
   <para>
    This is what you have after successful compilation:
    <variablelist>
     <varlistentry>
      <term><literal>src/yazproxy</literal></term> 
      <listitem><para>
        The YAZ Proxy program.
	It gets installed in your binaries directory
	(<parameter>prefix</parameter><literal>/bin</literal>).
       </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>src/libyazproxy.la</literal></term> 
      <listitem><para>
        The YAZ proxy library. This library gets installed in
	the libraries directory
	(<parameter>prefix</parameter><literal>/lib</literal>).
       </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>include/yazproxy/*.h</literal></term> 
      <listitem><para>
        C++ header files, which you'll need for YAZ proxy
	development. All these are installed in the header files area
	(<parameter>prefix</parameter><literal>/include/yazproxy</literal>).
       </para></listitem>
     </varlistentry>
     
     <varlistentry>
      <term><literal>etc</literal></term> 
      <listitem><para>
	Various files such as
	configuration files, XSLT files, CQL to RPN conversion files,
	a sample start/stop control script
	<filename>yazproxy.ctl.sh</filename> that can be used as
	template for an <filename>/etc/init.d</filename> script.
	These files are installed in the YAZ proxy's data area
	(<parameter>prefix</parameter><literal>/share/yazproxy</literal>).
       </para></listitem>
     </varlistentry>
     
    </variablelist>
   </para>
  </section>
  <section id="windows">
   <title>Building on Windows</title>
   <para>
    YAZ++ is shipped with "makefiles" for the NMAKE tool that comes
    with <ulink url="&url.vstudio;">
     Microsoft Visual Studio</ulink>.
    Version 6 and .NET has been tested. We expect that YAZ++ compiles
    with version 5 as well.
   </para>
   <note>
    <para>
     The YAZ proxy has never been used in production on Windows. Although
     it compiles and runs, doesn't mean it scale on that platform.
     Furthermore the
     YAZ proxy currently doesn't run as a Service - only as a Console
     application.
    </para>
   </note>
   <para>
    Start a command prompt and switch the sub directory
    <filename>WIN</filename> where the file <filename>makefile</filename>
    is located. Customize the installation by editing the
    <filename>makefile</filename> file (for example by using notepad).
    
    The following summarizes the most important settings in that file:
    
    <variablelist>
     <varlistentry><term><literal>DEBUG</literal></term>
      <listitem><para>
	If set to 1, the software is
	compiled with debugging libraries (code generation is
	multi-threaded debug DLL).
	If set to 0, the software is compiled with release libraries
	(code generation is multi-threaded DLL).
       </para></listitem>
     </varlistentry>

     <varlistentry><term><literal>YAZ_DIR</literal></term>
      <listitem><para>
	This must be set to the home of the YAZ source directory.
       </para></listitem>
     </varlistentry>

     <varlistentry><term><literal>YAZPP_DIR</literal></term>
      <listitem><para>
	This must be set to the home of the YAZ++ source directory.
       </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>HAVE_XSLT</literal>,
       <literal>LIBXSLT_DIR</literal></term>
      <listitem>
       <para>
	If <literal>HAVE_LIBXSLT</literal> is set to 1, the proxy is compiled
	with XSLT and XML support. In this configuration, set 
	<literal>LIBXSLT_DIR</literal> to the 
	<ulink url="&url.libxslt;">libXSLT</ulink> source
	directory.
       </para>
       
       <note>
	<para>
	 If you enable libXSLT you have to enable libxml2 and its
	 sub components zlib and iconv as well.
	</para>
       </note>
       
       <para>
	Windows versions of libXSLT, libxml2, zlib and iconv can be found
	<ulink url="&url.libxml2.download.win32;">
	 here</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>HAVE_ICONV</literal>,
       <literal>ICONV_DIR</literal></term>
      <listitem><para>
	If <literal>HAVE_ICONV</literal> is set to 1, the proxy is
	compiled with iconv support. In this configuration, set 
	<literal>ICONV_DIR</literal> to the iconv source directory.
       </para></listitem>
     </varlistentry>
     
     <varlistentry>
      <term><literal>HAVE_LIBXML2</literal>,
       <literal>LIBXML2_DIR</literal></term>
      <listitem>
       <para>
	If <literal>HAVE_LIBXML2</literal> is set to 1, the proxy is compiled
	with XML support. In this configuration, set 
	<literal>LIBXML2_DIR</literal> to the 
	<ulink url="&url.libxml2;">libxml2</ulink> source directory
	and
	<literal>ZLIB_DIR</literal> to the zlib directory.
       </para>
       
       <note>
	<para>
	 YAZ++ is not using ZLIB. But libxml2 is.
	</para>
       </note>
      </listitem>
     </varlistentry>
     
    </variablelist>
   </para>
   <para>
    When satisfied with the settings in the makefile, type
    <screen>
     nmake
    </screen>
   </para>
   <tip>
    <para>
     If the <filename>nmake</filename> command is not found on your system
     you probably haven't defined the environment variables required to
     use that tool. To fix that, find and run the batch file
     <filename>vcvars32.bat</filename>. You need to run it from within
     the command prompt or set the environment variables "globally";
     otherwise it doesn't work.
    </para>
   </tip>
   <para>
    If you wish to recompile YAZ++ - for example if you modify
    settings in the <filename>makefile</filename> you can delete
    object files, etc by running.
    <screen>
     nmake clean
    </screen>
   </para>
   <para>
    The following files are generated upon successful compilation:
    
    <variablelist>
     <varlistentry><term><filename>bin/yazproxy.dll</filename></term>
      <listitem><para>
	YAZ proxy DLL.
       </para></listitem></varlistentry>
     
     <varlistentry><term><filename>lib/yazproxy.lib</filename></term>
      <listitem><para>
	Import library for <filename>yazproxy.dll</filename>.
       </para></listitem></varlistentry>
     
     <varlistentry><term><filename>bin/yazproxy.exe</filename></term>
      <listitem><para>
	YAZ proxy. It's a WIN32 console application.
       </para></listitem></varlistentry>
     
    </variablelist>
    
   </para>
   
  </section>
 </chapter>
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document: "yazproxy.xml"
 sgml-local-catalogs: nil
 sgml-namecase-general:t
 End:
 -->
